From f8f5654938b2f90c6a3955ff79cc495e5ff44047 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Sat, 15 Aug 2015 12:44:09 -0400
Subject: [PATCH] Limit -fx recursive to avoid stack overflow

Applied-upstream: 6.9.2.1
---
 magick/color.c |   4 -
 magick/fx.c    | 309 +++++++++++++++++++++++++++++++++------------------------
 2 files changed, 178 insertions(+), 135 deletions(-)

diff --git a/magick/color.c b/magick/color.c
index aa89f59..db9d039 100644
--- a/magick/color.c
+++ b/magick/color.c
@@ -2778,10 +2778,6 @@ MagickExport MagickBooleanType QueryMagickColorCompliance(const char *name,
               PixelPacket
                 pixel;
 
-              scale=1.0/360.0;
-              if ((flags & PercentValue) != 0)
-                scale=1.0/100.0;
-              geometry_info.rho*=360.0*scale;
               scale=1.0/255.0;
               if ((flags & PercentValue) != 0)
                 scale=1.0/100.0;
diff --git a/magick/fx.c b/magick/fx.c
index 2e9299c..89847a2 100644
--- a/magick/fx.c
+++ b/magick/fx.c
@@ -1256,7 +1256,7 @@ static double FxChannelStatistics(FxInfo *fx_info,const Image *image,
 
 static double
   FxEvaluateSubexpression(FxInfo *,const ChannelType,const ssize_t,
-    const ssize_t,const char *,double *,ExceptionInfo *);
+    const ssize_t,const char *,size_t *,double *,ExceptionInfo *);
 
 static MagickOffsetType FxGCD(MagickOffsetType alpha,MagickOffsetType beta)
 {
@@ -1325,10 +1325,12 @@ static double FxGetSymbol(FxInfo *fx_info,const ChannelType channel,
     length;
 
   size_t
+    depth,
     level;
 
   p=expression;
   i=GetImageIndexInList(fx_info->images);
+  depth=0;
   level=0;
   point.x=(double) x;
   point.y=(double) y;
@@ -1367,7 +1369,7 @@ static double FxGetSymbol(FxInfo *fx_info,const ChannelType channel,
               }
               *q='\0';
               alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,
-                &beta,exception);
+                &depth,&beta,exception);
               i=(ssize_t) (alpha+0.5);
               p++;
             }
@@ -1396,7 +1398,7 @@ static double FxGetSymbol(FxInfo *fx_info,const ChannelType channel,
               }
               *q='\0';
               alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,
-                &beta,exception);
+                &depth,&beta,exception);
               point.x=alpha;
               point.y=beta;
               p++;
@@ -1421,7 +1423,7 @@ static double FxGetSymbol(FxInfo *fx_info,const ChannelType channel,
                 }
                 *q='\0';
                 alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,
-                  &beta,exception);
+                  &depth,&beta,exception);
                 point.x+=alpha;
                 point.y+=beta;
                 p++;
@@ -2118,9 +2120,11 @@ static const char *FxOperatorPrecedence(const char *expression,
 }
 
 static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
-  const ssize_t x,const ssize_t y,const char *expression,double *beta,
-  ExceptionInfo *exception)
+  const ssize_t x,const ssize_t y,const char *expression,size_t *depth,
+  double *beta,ExceptionInfo *exception)
 {
+#define FxMaxParenthesisDepth  58
+
   char
     *q,
     subexpression[MaxTextExtent];
@@ -2145,36 +2149,40 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       (void) CopyMagickString(subexpression,expression,(size_t)
         (p-expression+1));
-      alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,beta,
-        exception);
+      alpha=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,depth,
+        beta,exception);
       switch ((unsigned char) *p)
       {
         case '~':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           *beta=(double) (~(size_t) *beta);
           return(*beta);
         }
         case '!':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(*beta == 0.0 ? 1.0 : 0.0);
         }
         case '^':
         {
           *beta=pow((double) alpha,(double) FxEvaluateSubexpression(fx_info,
-            channel,x,y,++p,beta,exception));
+            channel,x,y,++p,depth,beta,exception));
           return(*beta);
         }
         case '*':
         case ExponentialNotation:
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha*(*beta));
         }
         case '/':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           if (*beta == 0.0)
             {
               (void) ThrowMagickException(exception,GetMagickModule(),
@@ -2185,7 +2193,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         }
         case '%':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           *beta=fabs(floor(((double) *beta)+0.5));
           if (*beta == 0.0)
             {
@@ -2197,78 +2206,104 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         }
         case '+':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha+(*beta));
         }
         case '-':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha-(*beta));
         }
         case LeftShiftOperator:
         {
-          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           *beta=(double) ((size_t) (alpha+0.5) << (size_t) (gamma+0.5));
           return(*beta);
         }
         case RightShiftOperator:
         {
-          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           *beta=(double) ((size_t) (alpha+0.5) >> (size_t) (gamma+0.5));
           return(*beta);
         }
         case '<':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha < *beta ? 1.0 : 0.0);
         }
         case LessThanEqualOperator:
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha <= *beta ? 1.0 : 0.0);
         }
         case '>':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha > *beta ? 1.0 : 0.0);
         }
         case GreaterThanEqualOperator:
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha >= *beta ? 1.0 : 0.0);
         }
         case EqualOperator:
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(fabs(alpha-(*beta)) < MagickEpsilon ? 1.0 : 0.0);
         }
         case NotEqualOperator:
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(fabs(alpha-(*beta)) >= MagickEpsilon ? 1.0 : 0.0);
         }
         case '&':
         {
-          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           *beta=(double) ((size_t) (alpha+0.5) & (size_t) (gamma+0.5));
           return(*beta);
         }
         case '|':
         {
-          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           *beta=(double) ((size_t) (alpha+0.5) | (size_t) (gamma+0.5));
           return(*beta);
         }
         case LogicalAndOperator:
         {
-          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
-          *beta=(alpha > 0.0) && (gamma > 0.0) ? 1.0 : 0.0;
+          p++;
+          if (alpha <= 0.0)
+            { 
+              *beta=0.0;
+              return(*beta);
+            }
+          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth,beta,
+            exception);
+          *beta=(gamma > 0.0) ? 1.0 : 0.0;
           return(*beta);
         }
         case LogicalOrOperator:
         {
-          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
-          *beta=(alpha > 0.0) || (gamma > 0.0) ? 1.0 : 0.0;
+          p++;
+          if (alpha > 0.0) 
+            {
+             *beta=1.0;  
+             return(*beta);  
+            }
+          gamma=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth,beta,
+            exception);
+          *beta=(gamma > 0.0) ? 1.0 : 0.0;
           return(*beta);
         }
         case '?':
@@ -2286,9 +2321,11 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
               return(0.0);
             }
           if (fabs((double) alpha) >= MagickEpsilon)
-            gamma=FxEvaluateSubexpression(fx_info,channel,x,y,p,beta,exception);
+            gamma=FxEvaluateSubexpression(fx_info,channel,x,y,p,depth,beta,
+              exception);
           else
-            gamma=FxEvaluateSubexpression(fx_info,channel,x,y,q,beta,exception);
+            gamma=FxEvaluateSubexpression(fx_info,channel,x,y,q,depth,beta,
+              exception);
           return(gamma);
         }
         case '=':
@@ -2306,7 +2343,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
               return(0.0);
             }
           ClearMagickException(exception);
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           (void) FormatLocaleString(numeric,MaxTextExtent,"%g",(double)
             *beta);
           (void) DeleteNodeFromSplayTree(fx_info->symbols,subexpression);
@@ -2316,17 +2354,19 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         }
         case ',':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(alpha);
         }
         case ';':
         {
-          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,beta,exception);
+          *beta=FxEvaluateSubexpression(fx_info,channel,x,y,++p,depth,beta,
+            exception);
           return(*beta);
         }
         default:
         {
-          gamma=alpha*FxEvaluateSubexpression(fx_info,channel,x,y,p,beta,
+          gamma=alpha*FxEvaluateSubexpression(fx_info,channel,x,y,p,depth,beta,
             exception);
           return(gamma);
         }
@@ -2334,29 +2374,34 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     }
   if (strchr("(",(int) *expression) != (char *) NULL)
     {
+      (*depth)++;
+      if (*depth >= FxMaxParenthesisDepth)
+        (void) ThrowMagickException(exception,GetMagickModule(),OptionError,
+          "ParenthesisNestedTooDeeply","`%s'",expression);
       (void) CopyMagickString(subexpression,expression+1,MaxTextExtent);
       subexpression[strlen(subexpression)-1]='\0';
-      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,beta,
-        exception);
+      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,subexpression,depth,
+        beta,exception);
+      (*depth)--;
       return(gamma);
     }
   switch (*expression)
   {
     case '+':
     {
-      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,expression+1,beta,
+      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,expression+1,depth,beta,
         exception);
       return(1.0*gamma);
     }
     case '-':
     {
-      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,expression+1,beta,
+      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,expression+1,depth,beta,
         exception);
       return(-1.0*gamma);
     }
     case '~':
     {
-      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,expression+1,beta,
+      gamma=FxEvaluateSubexpression(fx_info,channel,x,y,expression+1,depth,beta,
         exception);
       return((double) (~(size_t) (gamma+0.5)));
     }
@@ -2365,29 +2410,29 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       if (LocaleNCompare(expression,"abs",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(fabs((double) alpha));
         }
 #if defined(MAGICKCORE_HAVE_ACOSH)
       if (LocaleNCompare(expression,"acosh",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           return(acosh((double) alpha));
         }
 #endif
       if (LocaleNCompare(expression,"acos",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(acos((double) alpha));
         }
 #if defined(MAGICKCORE_HAVE_J1)
       if (LocaleNCompare(expression,"airy",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           if (alpha == 0.0)
             return(1.0);
           gamma=2.0*j1((double) (MagickPI*alpha))/(MagickPI*alpha);
@@ -2397,41 +2442,41 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
 #if defined(MAGICKCORE_HAVE_ASINH)
       if (LocaleNCompare(expression,"asinh",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           return(asinh((double) alpha));
         }
 #endif
       if (LocaleNCompare(expression,"asin",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(asin((double) alpha));
         }
       if (LocaleNCompare(expression,"alt",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(((ssize_t) alpha) & 0x01 ? -1.0 : 1.0);
         }
       if (LocaleNCompare(expression,"atan2",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           return(atan2((double) alpha,(double) *beta));
         }
 #if defined(MAGICKCORE_HAVE_ATANH)
       if (LocaleNCompare(expression,"atanh",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           return(atanh((double) alpha));
         }
 #endif
       if (LocaleNCompare(expression,"atan",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(atan((double) alpha));
         }
       if (LocaleCompare(expression,"a") == 0)
@@ -2450,20 +2495,19 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       if (LocaleNCompare(expression,"ceil",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(ceil((double) alpha));
         }
       if (LocaleNCompare(expression,"cosh",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,             beta,exception);
           return(cosh((double) alpha));
         }
       if (LocaleNCompare(expression,"cos",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(cos((double) alpha));
         }
       if (LocaleCompare(expression,"c") == 0)
@@ -2478,8 +2522,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
           const char
             *type;
 
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           if (fx_info->images->colorspace == CMYKColorspace)
             switch (channel)
             {
@@ -2511,8 +2555,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         }
       if (LocaleNCompare(expression,"drc",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return((alpha/(*beta*(alpha-1.0)+1.0)));
         }
       break;
@@ -2524,8 +2568,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         return(MagickEpsilon);
       if (LocaleNCompare(expression,"exp",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(exp((double) alpha));
         }
       if (LocaleCompare(expression,"e") == 0)
@@ -2537,8 +2581,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       if (LocaleNCompare(expression,"floor",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           return(floor((double) alpha));
         }
       break;
@@ -2548,8 +2592,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       if (LocaleNCompare(expression,"gauss",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           gamma=exp((double) (-alpha*alpha/2.0))/sqrt(2.0*MagickPI);
           return(gamma);
         }
@@ -2558,8 +2602,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
           MagickOffsetType
             gcd;
 
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           gcd=FxGCD((MagickOffsetType) (alpha+0.5),(MagickOffsetType)
             (*beta+0.5));
           return((double) gcd);
@@ -2577,8 +2621,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         return(FxGetSymbol(fx_info,channel,x,y,expression,exception));
       if (LocaleNCompare(expression,"hypot",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           return(hypot((double) alpha,(double) *beta));
         }
       break;
@@ -2597,15 +2641,15 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         return(FxGetSymbol(fx_info,channel,x,y,expression,exception));
       if (LocaleNCompare(expression,"int",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(floor(alpha));
         }
 #if defined(MAGICKCORE_HAVE_ISNAN)
       if (LocaleNCompare(expression,"isnan",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+	    beta,exception);
           return((double) !!isnan((double) alpha));
         }
 #endif
@@ -2621,24 +2665,23 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
 #if defined(MAGICKCORE_HAVE_J0)
       if (LocaleNCompare(expression,"j0",2) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+2,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+2,depth,
+            beta,exception);
           return(j0((double) alpha));
         }
 #endif
 #if defined(MAGICKCORE_HAVE_J1)
       if (LocaleNCompare(expression,"j1",2) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+2,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+2,depth,             beta,exception);
           return(j1((double) alpha));
         }
 #endif
 #if defined(MAGICKCORE_HAVE_J1)
       if (LocaleNCompare(expression,"jinc",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           if (alpha == 0.0)
             return(1.0);
           gamma=(2.0*j1((double) (MagickPI*alpha))/(MagickPI*alpha));
@@ -2652,20 +2695,20 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       if (LocaleNCompare(expression,"ln",2) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+2,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+2,depth,
+            beta,exception);
           return(log((double) alpha));
         }
       if (LocaleNCompare(expression,"logtwo",6) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+6,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+6,depth,
+            beta,exception);
           return(log10((double) alpha))/log10(2.0);
         }
       if (LocaleNCompare(expression,"log",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(log10((double) alpha));
         }
       if (LocaleCompare(expression,"lightness") == 0)
@@ -2681,22 +2724,22 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         break;
       if (LocaleNCompare(expression,"max",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(alpha > *beta ? alpha : *beta);
         }
       if (LocaleNCompare(expression,"minima",6) == 0)
         break;
       if (LocaleNCompare(expression,"min",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(alpha < *beta ? alpha : *beta);
         }
       if (LocaleNCompare(expression,"mod",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           gamma=alpha-floor((double) (alpha/(*beta)))*(*beta);
           return(gamma);
         }
@@ -2709,8 +2752,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       if (LocaleNCompare(expression,"not",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return((double) (alpha < MagickEpsilon));
         }
       if (LocaleCompare(expression,"n") == 0)
@@ -2735,8 +2778,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         return(MagickPI);
       if (LocaleNCompare(expression,"pow",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(pow((double) alpha,(double) *beta));
         }
       if (LocaleCompare(expression,"p") == 0)
@@ -2759,8 +2802,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         return(GetPseudoRandomValue(fx_info->random_info));
       if (LocaleNCompare(expression,"round",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           return(floor((double) alpha+0.5));
         }
       if (LocaleCompare(expression,"r") == 0)
@@ -2774,14 +2817,14 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         return(FxGetSymbol(fx_info,channel,x,y,expression,exception));
       if (LocaleNCompare(expression,"sign",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(alpha < 0.0 ? -1.0 : 1.0);
         }
       if (LocaleNCompare(expression,"sinc",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           if (alpha == 0)
             return(1.0);
           gamma=(sin((double) (MagickPI*alpha))/(MagickPI*alpha));
@@ -2789,26 +2832,26 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         }
       if (LocaleNCompare(expression,"sinh",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(sinh((double) alpha));
         }
       if (LocaleNCompare(expression,"sin",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(sin((double) alpha));
         }
       if (LocaleNCompare(expression,"sqrt",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(sqrt((double) alpha));
         }
       if (LocaleNCompare(expression,"squish",6) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+6,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+6,depth,
+            beta,exception);
           return((1.0/(1.0+exp((double) (-alpha)))));
         }
       if (LocaleCompare(expression,"s") == 0)
@@ -2820,22 +2863,22 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
     {
       if (LocaleNCompare(expression,"tanh",4) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+4,depth,
+            beta,exception);
           return(tanh((double) alpha));
         }
       if (LocaleNCompare(expression,"tan",3) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+3,depth,
+            beta,exception);
           return(tan((double) alpha));
         }
       if (LocaleCompare(expression,"Transparent") == 0)
         return(0.0);
       if (LocaleNCompare(expression,"trunc",5) == 0)
         {
-          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-            exception);
+          alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,depth,
+            beta,exception);
           if (alpha >= 0.0)
             return(floor((double) alpha));
           return(ceil((double) alpha));
@@ -2865,8 +2908,8 @@ static double FxEvaluateSubexpression(FxInfo *fx_info,const ChannelType channel,
         {
           do
           {
-            alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,beta,
-              exception);
+            alpha=FxEvaluateSubexpression(fx_info,channel,x,y,expression+5,
+              depth,beta,exception);
           } while (fabs((double) alpha) >= MagickEpsilon);
           return(*beta);
         }
@@ -2931,9 +2974,13 @@ MagickExport MagickBooleanType FxEvaluateChannelExpression(FxInfo *fx_info,
   double
     beta;
 
+  size_t
+    depth;
+
   beta=0.0;
-  *alpha=FxEvaluateSubexpression(fx_info,channel,x,y,fx_info->expression,&beta,
-    exception);
+  depth=0;
+  *alpha=FxEvaluateSubexpression(fx_info,channel,x,y,fx_info->expression,&depth,
+    &beta,exception);
   return(exception->severity == OptionError ? MagickFalse : MagickTrue);
 }
 
